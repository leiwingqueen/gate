<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tool="http://www.springframework.org/schema/tool" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
			http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool-3.1.xsd
			http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd"
	default-lazy-init="true">
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" 
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.elend.gate.*.*</value>
            </list>
        </property>
    </bean>
    <bean id="druid-stat-interceptor" 
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>
    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor" 
                     pointcut-ref="druid-stat-pointcut" /> 
    </aop:config>
    
	<!-- 慢sql 监控 start -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!--慢SQL统计，如果SQL执行时间超过一定时间则记录为慢SQL  -->
        <property name="slowSqlMillis" value="500" />
        <!--慢SQL统计日志输出  -->
        <property name="logSlowSql" value="true" />
        <!--合并SQL统计 例如select * from table t where t.id =1，会被变为select * from table t where t.id =？来统计  -->
        <property name="mergeSql" value="true" />
    </bean>
	<!-- 慢sql 监控 end -->
	<bean id="gateDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<!-- stat 对请求过程进行监控收集 -->
		<!-- <property name="filters"><value>stat</value></property> -->
		<!-- 最大连接池数量 -->
		<property name="maxActive">
			<value>50</value>
		</property>
		<!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
		<property name="initialSize">
			<value>5</value>
		</property>
		<!-- 最小连接池数量 -->
		<property name="minIdle">
			<value>5</value>
		</property>
		<!-- 连接间隔时间 -->
		<property name="timeBetweenEvictionRunsMillis">
			<value>60000</value>
		</property>
		<property name="minEvictableIdleTimeMillis">
			<value>300000</value>
		</property>
		<!-- maxWait配置后会自动使用公平锁，会影响并发能力 -->
		<property name="maxWait" value="10000" />
		<property name="validationQuery">
			<value>SELECT 'x'</value>
		</property>
		<!-- 申请连接时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
		<property name="testWhileIdle">
			<value>true</value>
		</property>
		<property name="testOnBorrow">
			<value>false</value>
		</property>
		<property name="testOnReturn">
			<value>false</value>
		</property>
		<!-- <property name="timeBetweenLogStatsMillis" value="300000" /> -->
		<!-- mysql下建议关闭poolPreparedStatements <property name="poolPreparedStatements"><value>false</value></property> 
			<property name="maxOpenPreparedStatements"><value>10</value></property> -->
		<!-- 慢sql 监控 start -->
		<!-- 配置监控统计拦截的filters -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
			</list>
		</property>
		<!-- 数据库监控，及日志配置 -->
		<property name="filters" value="slf4j" />
		<!-- 合并统计多个数据源 -->
		<property name="useGloalDataSourceStat" value="true" />
		<!-- 慢sql 监控 end -->
	</bean>
	<!-- 事务管理-->
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="gateDataSource"/>
	</bean>
	
	<tx:advice id="gateTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="load*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="list*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="find*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="query*" read-only="true" propagation="SUPPORTS"/>
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 
	<aop:config>
		<aop:pointcut id="elendServiceOperation" expression="execution(* com.elend.p2p.service.impl..*.*(..))"/>
		<aop:advisor advice-ref="elendTxAdvice" pointcut-ref="elendServiceOperation"/>
	</aop:config>
	 -->
	 
	<!-- 用注解来实现事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
    <!-- springjdbc方式 -->
	<bean id="gateJdbcTemplate"  class = "org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="gateDataSource" />
	</bean>
	<bean id="normalMemcache" class="com.elend.commons.memcache.MemcacheImpl" init-method="init" destroy-method="destroy">
		<property name="servers" value="memcached1.p2p.gzdai.com:11211,memcached2.p2p.gzdai.com:11211"/>
		<property name="maxConn" value="400" />
	</bean>
	
    <bean id="memcachedLock" class="com.elend.p2p.util.memcached.MemcachedLock">
		<property name="memcached" ref="normalMemcache"/>
		<property name="prefix" value="mapLock:" />
	</bean>
	
	<!-- 用作计数器的memcached（风控计数、SendMessageHelper发送短信计数）-->
    <bean id="counterMemcache" class="com.elend.p2p.util.memcached.CounterMemcacheImpl" init-method="init" destroy-method="destroy">
		<property name="servers" value="memcached1.p2p.gzdai.com:11212,memcached2.p2p.gzdai.com:11212"/>
		<property name="maxConn" value="300" />
	</bean>
	
	<bean id="performanceMonitorPointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
            <!-- 
                <value>com.elend.p2p.*.*</value>
                 -->
                <value>com.elend.gate.*.service.*.*</value>
                
            </list>
        </property>
    </bean>
    <bean id="performanceMonitorInterceptor" 
          class="com.elend.gate.web.interceptor.PerformanceMonitorInterceptor">
    </bean>
    <aop:config>
        <aop:advisor advice-ref="performanceMonitorInterceptor" pointcut-ref="performanceMonitorPointcut" /> 
    </aop:config>
    
    <!-- cookie辅助类 -->
	<bean id="cookieUtil" class="com.elend.p2p.session.CookieUtil" lazy-init="false">
		<property name="domain" value=".gzdai.com" />
	</bean>
	<!-- 点对点通知线程 -->
	<bean id="nofityThreadContext" class="com.elend.gate.notify.ThreadContext" 
 		init-method="start" destroy-method="stop" lazy-init="false">
 		<property name="notifyService" ref="notifyServiceImpl" />
 		<property name="orderFacade" ref="orderFacade" />
 		<property name="retryStategy" ref="simpleRetryStategy" />
 		<property name="withdrawQueueService" ref="withdrawQueueServiceImpl"></property>
 		<property name="payAgentCallbackService" ref="payAgentCallbackServiceImpl"></property>
 	</bean>
 	
 	<!-- 队列仲裁,保证每个时刻只有一个进程的queue在运行 -->
    <bean id="queueArbitrator" class="com.elend.gate.notify.QueueArbitrator" init-method="init" lazy-init="false">
    	<!-- zookeeper的根节点 -->
    	<property name="root" value="/gate"/>
    	<!-- 注册节点前缀 -->
    	<property name="prefix" value="node_"/>
    	<!-- zookpeer集群 -->
    	<property name="hosts" value="zookeeper1.p2p.gzdai.com:2181,zookeeper2.p2p.gzdai.com:2181,zookeeper3.p2p.gzdai.com:2181"/>
    	<!-- 连接超时 ms -->
    	<property name="sessionTimeOut" value="5000"/>
    </bean>
</beans>